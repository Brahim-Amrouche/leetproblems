
pub mod solution {
    use std::collections::{HashMap, BTreeMap};

    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let mut k_elements = HashMap::new();
        nums.into_iter().for_each(|v : i32| {
            *k_elements.entry(v).or_insert(0) += 1;
        });
        let mut ordered_elements : BTreeMap<i32, Vec<i32>> = BTreeMap::new();
        k_elements.into_iter().for_each(|(key , val) | {
            (*ordered_elements.entry(val).or_insert(Vec::new())).push(key);
        });
        let mut res = Vec::new();
        let mut k = k;
        'outer: for (_key, val_vec) in ordered_elements.into_iter().rev()
        {
            for val in val_vec.into_iter() {
                if k == 0 {
                    break 'outer;
                }
                res.push(val);
                k -= 1;
            } 
        };
        res
    }
}

fn main ()
{

   let results = solution::top_k_frequent([58,40,54,26,10,59,20,24,84,59,34,92,40,61,32,21,90,42,54,91,30,67,18,61,81,38,88,32,61,45,39,43,35,11,16,99,99,44,78,59,87,74,97,46,90,92,72,65,2,77,94,28,99,81,1,45,75,38,64,28,47,80,49,82,93,43,35,97,94,32,11,69,37,63,32,93,14,57,8,44,15,34,55,74,83,35,55,82,61,71,38,73,67,86,66,38,46,80,70,63,64,9,81,61,5,55,96,100,32,52,95,90,2,100,67,2,1,90,13,59,37,93,98,26,74,20,28,34,31,4,67,67,22,99,11,99,64,64,27,11,44,77,95,46,49,61,17,37,15,80,86,47,27,3,12,18,16,13,60,29,19,86,53,61,67,92,58,83,41,93,71,60,78,76,47,24,21,66,80,73,83,95,63,98,73,72,26,25,44,6,52,47,51,44,29,61,69,23,53,6,20,37,47,12,16,30,47,29,72,20,82,98,22,84,26,84,54,59,68,6,31,95,45,68,83,43,43,44,59,42,39,40,80,20,83,39,28,60,63,50,14,42,83,22,87,42,73,23,43,28,13,90,67,88,89,5,92,49,8,6,25,60,98,25,47,23,66,93,43,65,5,89,4,88,40,18,16,87,3,31,17,42,100,97,34,12,13,68,79,29,45,56,33,62,90,8,31,3,80,54,71,95,44,8,74,8,62,46,20,8,73,27,98,3,32,87,59,90,69,62,22,36,11,22,91,26,96,75,80,95,93,70,57,39,43,81,60,37,1,77,79,52,75,84,21,20,29,2,10,95,48,39,75,56,62,41,66,53,13,42,85,26,33,37,5,32,43,12,8,58,5,54,30,3,26,89,5,78,71,46,57,47,87,39,29,85,6,39,11,42,77,67,32,34,16,44,64,41,95,72,50,72,67,38,66,49,76,36,62,49,53,9,66,72,83,78,93,50,26,21,90,80,66,79,31,31,14,34,33,40,8,5,72,69,48,97,32,68,93,32,42,60,47,85,48,79,54,42,50,87,26,21,96,75,29,30,92,36,60,3,79,8,6,81,47,73,91,2,75,92,37,81,12,80,80,55,13,7,13,44,97,36,78,89,99,32,79,12,50,13,95,95,75,37,47,61,33,30,73,78,65,60,96,84,80,8,64,16,86,22,67,96,32,22,26,79,49,18,23,1,54,75,18,73,2,65,23,100,44,75,34,100,53,44,82,79,93,80,58,84,13,97,56,86,83,26,22,76,34,16,39,6,59,18,24,25,10,29,56,81,7,97,21,52,70,67,80,84,35,77,76,58,90,64,77,41,97,30,18,91,10,57,49,97,71,29,81,85,18,33,99,91,9,92,72,45,6,23,35,25,92,57,8,30,63,23,16,40,61,43,7,21,66,95,17,62,16,52,26,2,57,24,18,41,82,54,32,94,15,44,83,68,11,6,35,58,48,99,13,72,60,56,9,9,82,1,97,58,27,57,29,28,62,24,37,96,97,4,41,29,82,37,57,82,7,59,21,65,97,48,26,59,66,69,26,44,96,73,2,68,27,60,29,88,94,97,94,21,3,94,15,62,75,49,33,60,70,40,79,5,37,57,7,22,86,40,37,34,66,31,21,97,48,87,33,62,49,35,55,17,81,8,3,32,81,61,7,68,58,86,25,86,52,63,39,4,38,57,54,24,55,29,48,18,10,6,18,44,90,62,81,47,89,59,6,85,43,12,27,35,68,10,51,89,40,54,23,80,91,71,32,74,97,31,6,46,63,87,46,43,43,89,65,61,54,2,11,14,89,60,68,54,77,95,44,42,24,94,51,95,51,56,44,86,44,73,44,32,75,64,76,71,75,32,80,26,7,86,47,56,3,79,51,92,34,15,41,96,12,22,63,52,68,73,54,44,51,23,12,82,61,36,79,72,10,94,80,61,57,40,2,66,26,15,73,57,28,67,97,20,30,44,71,21,19,68,47,2,11,69,36,92,6,30,7,95,8,24,29,40,62,95,90,26,67,30,49,13,20,22,93,99,53,59,31,16,58,100,64,65,83,28,70,75,16,78,96,66,7,4,91,73,38,74,100,13,31,54,45,93,81,19,8,57,83,23,79,84,74,12,26,27,76,27,43,79,85,83,14,99,43,58,32,6,29,68,89,85,57,22,20,48,7,98,5,71,36,42,54,21,87,76,45,91,22,4,32,85,80,61,94,66,74,88,16,1,68,25,85,53,28,36,48,85,100,65,42,47,10,21,43,16,71,54,13,13,95,11,74,93
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4].to_vec(), 2);
    println!("the results are {results:?}");
}


